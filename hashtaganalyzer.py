import os
import pandas as pd
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules

class InstaHashtagAnalyzer:
    def __init__(self, profiles, files_path='./', save_to_prefix=''):
        """
        files_path: path of all files - both existing csv files and creating ones.
        save_to_prefix: prefix of result files generating in other methods.
        """
        self.__df_basket__ = None
        self.__files_path__ = files_path
        self.__profiles = profiles
        self.__save_to_prefix = save_to_prefix
        return

    def generate_basket(self, with_feedback=True):
        """
        generates basket for hashtags of profiles.
        hashtags must already be extracted and saved in a csv file with "shortcode, hashtags, likes, comments, timestamp" columns.
        each profile has a scv as "profile_name.csv".
        profiles: list of profile names
        """
        if with_feedback:
            print('>>', self.__class__.__name__, 'generate_basket')

        hashtags_list = []
        for p in self.__profiles:
            filename = self.__files_path__ + p + '.csv'
            if not os.path.exists(filename):
                continue
            df = pd.read_csv(filename)
            hashtags_list = hashtags_list + list(df['hashtags'].values)

        self.__df_basket__ = pd.DataFrame()
        for line in hashtags_list:
            # some lines are empty and because it created from numpy.array, it contains 'nan' as a float
            if not isinstance(line, str):
                continue
            row_hashtags = line.split()
            if len(row_hashtags) <= 0:
                continue
            cols = self.__df_basket__.columns.values.tolist()
            for w in row_hashtags:
                if not w in cols:
                    self.__df_basket__[w] = 0
                    cols.append(w)
            row = []
            for col in cols:
                if col in row_hashtags:
                    row.append(1)
                else:
                    row.append(0)
            self.__df_basket__.loc[len(self.__df_basket__)] = row
        fn = self.__files_path__ + self.__save_to_prefix + '.basket.csv'
        self.__df_basket__.to_csv(fn, index=False)
        return self

    def analyze_basket(self, from_file=None, freq_min_support=1, rules_metric='lift', with_feedback=True):
        """
        produces frequencies and association rules of hashtags from basket generated by generate_basket method.
        freq_min_support and rules metric: parameters of used algorithms.
        """
        if with_feedback:
            print('>>', self.__class__.__name__, 'analyze_basket')

        if from_file:
            if not os.path.exists(from_file):
                print(from_file, 'not found!!!')
            else:
                self.__df_basket__ = pd.read_csv(from_file)

        if self.__df_basket__ is not None:
            frequent_itemsets = apriori(self.__df_basket__, min_support=freq_min_support, use_colnames=True)
            fn = self.__files_path__ + self.__save_to_prefix + '.freq.csv'
            frequent_itemsets.to_csv(fn, index=False)
            rules = association_rules(frequent_itemsets, metric=rules_metric, min_threshold=1)
            fn = self.__files_path__ + self.__save_to_prefix + '.rules.csv'
            rules.to_csv(fn, index=False)
        return self

    def compare(self, profile_name, with_feedback=True):
        """
        compares hashtags of profile_name with hashtags of reference self.__profiles.
        finds intersection and difference of ref_hashtags and current profile hashtags.
        saves results in a text file "[profile_name].compare.txt"
        """
        if with_feedback:
            print('>>', self.__class__.__name__, 'compare')

        fname = self.__files_path__ + profile_name + '.csv'
        if not os.path.exists(fname):
            print(fname, 'not found!')
            return self
        profile_hashtags = self.__profile_hashtags_set(profile_name)
        ref_hashtags = self.__common_hashtags(with_feedback=True)
        shared_hashtags = set.intersection(ref_hashtags, profile_hashtags)
        diff_hashtags = set.difference(ref_hashtags, profile_hashtags)
        fname = self.__files_path__ + self.__save_to_prefix + '.' + profile_name + '.compare.txt'
        with open(fname, 'w') as f:
            f.write('هشتگ‌های مرجع:\n')
            f.write(' '.join(ref_hashtags) + '\n\n')
            f.write('هشتگهای {}:\n'.format(profile_name))
            f.write(' '.join(profile_hashtags) + '\n\n')
            f.write('هشتگ‌های مشترک:\n')
            f.write(' '.join(shared_hashtags) + '\n\n')
            f.write('هشتگ‌های اضافه مرجع:\n')
            f.write(' '.join(diff_hashtags) + '\n\n')
        return self

    def __common_hashtags(self, with_feedback=True):
        """
        retrieves all commom hashtags of profiles.
        """
        if with_feedback:
            print('>>', self.__class__.__name__, '__common_hashtags')

        profiles_hashtags_sets = []
        for p in self.__profiles:
            profile_hashtags = self.__profile_hashtags_set(p)
            if profile_hashtags:
                profiles_hashtags_sets.append(profile_hashtags)
        commons = set.intersection(*profiles_hashtags_sets)
        fn = self.__files_path__ + self.__save_to_prefix + '.common-hashtags.txt'
        with open(fn, 'w') as f:
            f.write('\n'.join(commons))
        return commons

    def __profile_hashtags_set(self, profile_name):
        filename = self.__files_path__ + profile_name + '.csv'
        if not os.path.exists(filename):
            return None
        df = pd.read_csv(filename)
        hashtags_list = df['hashtags'].values.tolist()
        hashtags_list = [x for x in hashtags_list if isinstance(x, str)]
        hashtags = [x.split() for x in hashtags_list]
        hashtags = set([x for y in hashtags for x in y])
        return hashtags

        
if __name__ == "__main__":
    pass

    # profiles = ['tagneshan.ir', 'tahchinbot', 'timsar_arman']
    # profiles = ['tahchinbot', 'timsar_arman']
    profiles = ['tahchinbot', 'ashpazkhanum', 'ashpazi_amrozi']

    analyzer = InstaHashtagAnalyzer(profiles, files_path='./instadata/', save_to_prefix='test_results') \
        .generate_basket() \
        .analyze_basket(freq_min_support=0.50, rules_metric='lift', from_file=None) \
        .compare('timsar_arman')

    # analyzer = InstaHashtagAnalyzer(profiles, files_path='./instadata/') \
    #     .__common_hashtags(with_feedback=True)
    # print(analyzer.__df_basket__)